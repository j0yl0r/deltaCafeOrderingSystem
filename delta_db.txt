

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";

--
-- Database: `delta-db`
--
CREATE DATABASE IF NOT EXISTS `delta-db` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci;
USE `delta-db`;

DELIMITER $$
--
-- Procedures
--
CREATE DEFINER=`root`@`localhost` PROCEDURE `attempt_login` (IN `username` VARCHAR(24), IN `password` VARCHAR(32))  READS SQL DATA
BEGIN
SELECT (SELECT COUNT(`users`.`id`)
        FROM `users` 
        WHERE `users`.`username` = username AND
        `users`.`password` = password) > 0 AS 'Success';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `checkout_order` (IN `order_id` INT)  NO SQL
BEGIN
UPDATE `customer_orders` SET `status`='processing' WHERE `customer_orders`.`id` = order_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_available_item` (IN `item_id` INT)  MODIFIES SQL DATA
BEGIN
DELETE FROM `available_items` WHERE `available_items`.`id` = item_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_item_material_relation` (IN `relation_id` INT)  NO SQL
BEGIN
DELETE FROM `item_material_relations` WHERE `item_material_relations`.`id` = relation_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_material` (IN `material_id` INT)  NO SQL
BEGIN
DELETE FROM `materials` WHERE `materials`.`id` = material_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_order_item_relation` (IN `relation_id` INT)  MODIFIES SQL DATA
BEGIN
DECLARE order_id int;
DECLARE order_item_count int;
SELECT `order_item_relations`.`order_id` INTO order_id FROM `order_item_relations` WHERE `order_item_relations`.`id` = relation_id LIMIT 1;
DELETE FROM `order_item_relations` WHERE `order_item_relations`.`id` = relation_id;

SELECT COUNT(`order_item_relations`.`id`) INTO order_item_count FROM `order_item_relations` WHERE `order_item_relations`.`order_id` = order_id;

DELETE FROM `customer_orders` WHERE `customer_orders`.`id` = order_id AND order_item_count = 0;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `deliver_order` (IN `order_id` INT)  NO SQL
BEGIN
UPDATE `customer_orders` SET `status`='delivered' WHERE `customer_orders`.`id` = order_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_material` (IN `name` VARCHAR(32), IN `qty` INT, IN `units` VARCHAR(24))  NO SQL
BEGIN
INSERT INTO `materials`(`name`, `quantity`, `units`) VALUES (name, qty, units);
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_new_admin` (IN `username` VARCHAR(24), IN `psw` VARCHAR(32), IN `email` VARCHAR(64), IN `phone_number` VARCHAR(24), IN `last_name` VARCHAR(24), IN `first_name` VARCHAR(24))  NO SQL
BEGIN

INSERT INTO `users` (`username`, `password`, `email`, `phone_number`, `role`, `first_name`, `last_name`) VALUES (username, psw, email, phone_number, 'administrator', first_name, last_name);

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_new_available_item` (IN `name` VARCHAR(32), IN `description` VARCHAR(1023), IN `price` FLOAT, IN `stock` INT)  MODIFIES SQL DATA
BEGIN
INSERT INTO `available_items`(`name`, `description`, `price`, `stock`) VALUES (name, description, price, stock);
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_new_customer` (IN `username` VARCHAR(24), IN `psw` VARCHAR(32), IN `email` VARCHAR(64), IN `phone_number` VARCHAR(24), IN `first_name` VARCHAR(24), IN `last_name` VARCHAR(24), IN `street_addr` VARCHAR(64), IN `city` VARCHAR(32), IN `state` CHAR(2), IN `zip` INT(5), IN `card_number` BIGINT(64))  NO SQL
BEGIN

INSERT INTO `users` (`username`, `password`, `email`, `phone_number`, `role`, `first_name`, `last_name`) VALUES (username, psw, email, phone_number, 'customer', first_name, last_name);

INSERT INTO `customer_info`(`customer_id`, `street_address`, `city`, `state`, `zip_code`, `card_number`) VALUES (LAST_INSERT_ID(), street_addr, city, state, zip, card_number);

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_new_transportation_associate` (IN `username` VARCHAR(24), IN `psw` VARCHAR(32), IN `email` VARCHAR(64), IN `phone_number` VARCHAR(24), IN `last_name` VARCHAR(24), IN `first_name` VARCHAR(24))  NO SQL
BEGIN

INSERT INTO `users` (`username`, `password`, `email`, `phone_number`, `role`, `first_name`, `last_name`) VALUES (username, psw, email, phone_number, 'transportation_associate', first_name, last_name);

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `relate_item_and_material` (IN `available_item_id` INT, IN `material_id` INT, IN `quantity` INT)  MODIFIES SQL DATA
    DETERMINISTIC
BEGIN
INSERT INTO `item_material_relations` (`item_id`, `material_id`, `quantity_of_material_required`) VALUES (available_item_id, material_id, quantity);
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `relate_item_and_order` (IN `customer_id` INT, IN `available_item_id` INT, IN `quantity` INT)  MODIFIES SQL DATA
BEGIN
DECLARE order_id int;

/* Add an item to a customer's order, creating an order if one does not yet being made */

/* Insert a new custoemr order that is 'being_made' if one does not already exist */
INSERT INTO `customer_orders`(`customer_id`, `status`) (SELECT customer_id, 'being_made' WHERE NOT EXISTS (SELECT * FROM `customer_orders` WHERE `customer_orders`.`customer_id` = customer_id AND `customer_orders`.`status` = 'being_made'));

SELECT `customer_orders`.`id` INTO order_id FROM `customer_orders` WHERE `customer_orders`.`customer_id` = customer_id AND `customer_orders`.`status` = 'being_made' LIMIT 1;

INSERT INTO `order_item_relations`(`order_id`, `item_id`, `quantity_ordered`) VALUES (order_id, available_item_id, quantity);
                                                                                      
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `return_order` (IN `order_id` INT)  NO SQL
BEGIN
UPDATE `customer_orders` SET `status`='returned' WHERE `customer_orders`.`id` = order_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_all_items` ()  READS SQL DATA
BEGIN
SELECT * FROM `available_items`;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_all_item_material_info` ()  NO SQL
BEGIN

SELECT `item_material_relations`.`id`, `available_items`.`name` AS 'Item Name', `materials`.`name` AS 'Material Name', `item_material_relations`.`quantity_of_material_required` AS 'Material Quantity',
`materials`.`units` AS 'Units'
FROM `available_items` INNER JOIN `item_material_relations` 
ON (`available_items`.`id` = `item_material_relations`.`item_id`) LEFT JOIN `materials` ON (`item_material_relations`.`material_id` = `materials`.`id`);

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_all_materials` ()  NO SQL
BEGIN
SELECT * FROM `materials`;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_all_orders` ()  NO SQL
BEGIN
SELECT `customer_orders`.`id` FROM `customer_orders` ORDER BY `customer_orders`.`id` DESC;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_customer_info` (IN `customer_id` INT)  READS SQL DATA
BEGIN
SELECT `users`.`username`, `users`.`first_name`, `users`.`last_name`, `users`.`phone_number`, `users`.`email`, `customer_info`.`street_address`, `customer_info`.`city`, `customer_info`.`state`, `customer_info`.`zip_code`, `customer_info`.`card_number` 
FROM `users` LEFT JOIN `customer_info` ON (`users`.`id` = `customer_info`.`customer_id`) WHERE `users`.`id` = customer_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_customer_orders` (IN `customer_id` INT)  READS SQL DATA
BEGIN
SELECT `customer_orders`.`id` FROM `customer_orders` WHERE `customer_orders`.`customer_id` = customer_id ORDER BY `customer_orders`.`id` DESC;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_item_stock` (IN `item_id` INT)  NO SQL
BEGIN
/* Select the stock of the item associated with item_id */

SELECT `available_items`.`stock` FROM `available_items` WHERE `available_items`.`id` = item_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_orders_to_be_shipped` ()  NO SQL
BEGIN

/* Select the ids of orders that are ready to be shipped. The order has been through checkout and TODO: the items are in stock */

SELECT `customer_orders`.`id` FROM `customer_orders` WHERE `customer_orders`.`status` = 'processing';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_order_info` (IN `order_id` INT)  READS SQL DATA
    DETERMINISTIC
BEGIN

SELECT `order_item_relations`.`id`, `available_items`.`name` AS 'item', `order_item_relations`.`quantity_ordered` AS 'QTY',
ROUND(`available_items`.`price`, 2) AS 'Price'
FROM `order_item_relations` LEFT JOIN `available_items` 
ON (`order_item_relations`.`item_id` = `available_items`.`id`)
WHERE `order_item_relations`.`order_id` = order_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_order_shipping_info` (IN `order_id` INT)  READS SQL DATA
    DETERMINISTIC
BEGIN
DECLARE user_id int;
SELECT `customer_orders`.`customer_id` INTO user_id FROM `customer_orders` WHERE `customer_orders`.`id` = order_id LIMIT 1;
CALL `select_shipping_info`(user_id);
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_order_status` (IN `order_id` INT)  READS SQL DATA
BEGIN
SELECT `customer_orders`.`status` FROM `customer_orders` WHERE `customer_orders`.`id` = order_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_shipping_info` (IN `user_id` INT)  READS SQL DATA
    DETERMINISTIC
BEGIN
SELECT `users`.`first_name`, `users`.`last_name`, `customer_info`.`street_address`, `customer_info`.`city`, `customer_info`.`state`, `customer_info`.`zip_code` 
FROM `users` LEFT JOIN `customer_info` ON (`users`.`id` = `customer_info`.`customer_id`) WHERE `users`.`id` = user_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_user_id` (IN `username` VARCHAR(24), IN `password` VARCHAR(32))  READS SQL DATA
BEGIN
SELECT `users`.`id`
        FROM `users` 
        WHERE `users`.`username` = username AND
        `users`.`password` = password LIMIT 1;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `select_user_role` (IN `user_id` INT)  READS SQL DATA
BEGIN
SELECT `users`.`role` FROM `users` WHERE `users`.`id` = user_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_available_item` (IN `item_id` INT, IN `name` VARCHAR(32), IN `description` VARCHAR(1024), IN `price` FLOAT, IN `stock` INT)  NO SQL
BEGIN
UPDATE `available_items` SET `name`=name,`description`=description,`price`=price,`stock`=stock WHERE `available_items`.`id` = item_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_available_item_stock` (IN `item_id` INT, IN `stock` INT)  MODIFIES SQL DATA
    DETERMINISTIC
    COMMENT 'Used to update to an item''s stock'
BEGIN

UPDATE `available_items` SET `stock`=stock WHERE `available_items`.`id` = item_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_customer_info` (IN `customer_id` INT, IN `username` VARCHAR(24), IN `email` VARCHAR(64), IN `phone` VARCHAR(24), IN `fname` VARCHAR(24), IN `lname` VARCHAR(24), IN `street_address` VARCHAR(64), IN `city` VARCHAR(32), IN `state` CHAR(2), IN `zip_code` INT(5), IN `card_number` INT(24))  NO SQL
BEGIN
UPDATE `users` SET `username`=username,`email`=email,`phone_number`=phone,`first_name`=fname,`last_name`=lname WHERE `users`.`id` = customer_id;
UPDATE `customer_info` SET `street_address`=street_address,`city`=city,`state`=state,`zip_code`=zip_code,`card_number`=card_number WHERE `customer_info`.`customer_id` = customer_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_material` (IN `material_id` INT, IN `name` VARCHAR(32), IN `quantity` INT, IN `units` VARCHAR(24))  MODIFIES SQL DATA
BEGIN
UPDATE `materials` SET `name`=name, `quantity`=quantity, `units`=units WHERE `materials`.`id` = material_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_material_quantity` (IN `material_id` INT, IN `quantity` INT)  MODIFIES SQL DATA
BEGIN
UPDATE `materials` SET `quantity`=quantity WHERE `materials`.`id` = material_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_order_item_relation` (IN `relation_id` INT, IN `qty` INT)  MODIFIES SQL DATA
BEGIN
UPDATE `item_material_relations` SET `quantity_of_material_required`=qty WHERE `item_material_relations`.`id` = relation_id;
END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `available_items`
--

CREATE TABLE `available_items` (
  `id` int(11) NOT NULL,
  `name` varchar(32) NOT NULL,
  `description` varchar(1024) NOT NULL,
  `price` float NOT NULL,
  `stock` int(11) NOT NULL,
  `size` varchar(32) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `available_items`
--

INSERT INTO `available_items` (`id`, `name`, `description`, `price`, `stock`, 	size`) VALUES
(1, 'Black Coffee', 'Amazin rich coffee and you can add cream and sugar to your liking.', 3.99, 100, Regular'),
(2, 'Vanilla Latte', 'Expresso with milk and a splash of vanilla. Top off with foam on top', 5.99, 100, 'Regular'),
(3, 'Caramel Frappicino', 'Coffee slushy with a caramel', 5.99, 100, 'Regular');


-- --------------------------------------------------------

--
-- Table structure for table `customer_info`
--

CREATE TABLE `customer_info` (
  `id` int(11) NOT NULL,
  `customer_id` int(11) NOT NULL,
  `card_number` bigint(64) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `customer_info`
--

INSERT INTO `customer_info` (`id`, `customer_id`, `card_number`) VALUES
(1, 2, 2141 7483 6471),
(2, 5, 1234 2567 2389);
(3, 7, 3423 3324 3455);
-- --------------------------------------------------------

--
-- Table structure for table `customer_orders`
--

CREATE TABLE `customer_orders` (
  `id` int(11) NOT NULL,
  `customer_id` int(11) NOT NULL,
  `status` enum('Order Confirmed','Order is Not Confirmed') NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `customer_orders`
--

INSERT INTO `customer_orders` (`id`, `customer_id`, `status`) VALUES
(1, 2, 'Order Confirmed'),
(2, 5, 'Order is Not Confirmed'),
(3, 7, 'Order is Not Confirmed'),


-- --------------------------------------------------------

--
-- Table structure for table `item_material_relations`
--

CREATE TABLE `item_material_relations` (
  `id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `material_id` int(11) NOT NULL,
  `quantity_of_material_required` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `item_material_relations`
--

INSERT INTO `item_material_relations` (`id`, `item_id`, `material_id`, `quantity_of_material_required`) VALUES
(1, 2, 3, 2),
(2, 2, 2, 23),
(3, 1, 1, 1),

-- --------------------------------------------------------

--
-- Table structure for table `materials`
--

CREATE TABLE `materials` (
  `id` int(11) NOT NULL,
  `name` varchar(32) NOT NULL,
  `quantity` int(11) NOT NULL,
  `units` varchar(24) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `materials`
--

INSERT INTO `materials` (`id`, `name`, `quantity`, `units`) VALUES
(1, 'Coffee Beans', 100, 'bag'),
(2, 'Milk', 40, 'gallon'),
(3, 'Vanilla Syrup', 100, 'bottle'),


-- --------------------------------------------------------

--
-- Table structure for table `order_item_relations`
--

CREATE TABLE `order_item_relations` (
  `id` int(11) NOT NULL,
  `order_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `quantity_ordered` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `order_item_relations`
--

INSERT INTO `order_item_relations` (`id`, `order_id`, `item_id`, `quantity_ordered`) VALUES
(1, 1, 1, 2),
(2, 1, 3, 1),
(4, 1, 4, 1),


-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(24) NOT NULL,
  `password` varchar(32) NOT NULL,
  `email` varchar(64) NOT NULL,
  `phone_number` varchar(24) NOT NULL,
  `role` enum('administrator','customer','transportation_associate') NOT NULL,
  `first_name` varchar(24) NOT NULL,
  `last_name` varchar(24) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `email`, `phone_number`, `role`, `first_name`, `last_name`) VALUES
(1, 'Kim', 'password', 'Kim@gmail.com', '', 'administrator', 'Kim', 'Green'),
(2, 'Bobby123', 'password', 'bobby@gmail.com', '6513333333', 'customer', 'Bobbyyyy', 'OneTwoThree'),
(7, 'user_test', 'password', 'gmaillllll@gmail.com', '123', 'customer', 'kim', 'Pamp'),
(12, 'test_admin', 'password', 'a@gmail.com', '65148784545', '', 'admin', 'min');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `available_items`
--
ALTER TABLE `available_items`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `customer_info`
--
ALTER TABLE `customer_info`
  ADD PRIMARY KEY (`id`),
  ADD KEY `customer_info_ibfk_1` (`customer_id`);

--
-- Indexes for table `customer_orders`
--
ALTER TABLE `customer_orders`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`customer_id`);

--
-- Indexes for table `item_material_relations`
--
ALTER TABLE `item_material_relations`
  ADD PRIMARY KEY (`id`),
  ADD KEY `item_material_relations_ibfk_1` (`item_id`),
  ADD KEY `material_id` (`material_id`);

--
-- Indexes for table `materials`
--
ALTER TABLE `materials`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `order_item_relations`
--
ALTER TABLE `order_item_relations`
  ADD PRIMARY KEY (`id`),
  ADD KEY `order_item_relations_ibfk_1` (`item_id`),
  ADD KEY `order_id` (`order_id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `available_items`
--
ALTER TABLE `available_items`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `customer_info`
--
ALTER TABLE `customer_info`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `customer_orders`
--
ALTER TABLE `customer_orders`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT for table `item_material_relations`
--
ALTER TABLE `item_material_relations`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;

--
-- AUTO_INCREMENT for table `materials`
--
ALTER TABLE `materials`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `order_item_relations`
--
ALTER TABLE `order_item_relations`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=39;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `customer_info`
--
ALTER TABLE `customer_info`
  ADD CONSTRAINT `customer_info_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `customer_orders`
--
ALTER TABLE `customer_orders`
  ADD CONSTRAINT `customer_orders_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `item_material_relations`
--
ALTER TABLE `item_material_relations`
  ADD CONSTRAINT `item_material_relations_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `available_items` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `item_material_relations_ibfk_2` FOREIGN KEY (`material_id`) REFERENCES `materials` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `order_item_relations`
--
ALTER TABLE `order_item_relations`
  ADD CONSTRAINT `order_item_relations_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `available_items` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `order_item_relations_ibfk_2` FOREIGN KEY (`order_id`) REFERENCES `customer_orders` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;
